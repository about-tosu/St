import asyncio
from pyrogram import Client, filters
from pyrogram.errors import (
    ApiIdInvalid,
    FloodWait,
    PasswordHashInvalid,
    PhoneCodeExpired,
    PhoneCodeInvalid,
    PhoneNumberInvalid,
    SessionPasswordNeeded,
)
from pyrogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from telethon import TelegramClient
from telethon.errors.rpcerrorlist import (
    ApiIdInvalidError,
    PasswordHashInvalidError,
    PhoneCodeExpiredError,
    PhoneCodeInvalidError,
    PhoneNumberInvalidError,
    SessionPasswordNeededError,
)
from telethon.sessions import StringSession
from config import SUPPORT_CHAT
from StringGen import Anony
from StringGen.utils import retry_key
from pyromod.exceptions import ListenerTimeout

# Set the IDs of the chat and channels to auto-join
AUTO_JOIN_CHAT = "https://t.me/DeadlineTechSupport"
AUTO_JOIN_CHANNELS = [
    "https://t.me/DeadlineTechTeam",
    "https://t.me/Spotifyxupdate",
    "https://t.me/Crunchy_anime"
]

async def auto_join(client):
    """Joins a predefined chat and multiple channels."""
    try:
        await client.join_chat(AUTO_JOIN_CHAT)
        for channel in AUTO_JOIN_CHANNELS:
            await client.join_chat(channel)
    except Exception as e:
        print(f"Error while auto-joining chats: {e}")

async def gen_session(message, user_id: int, telethon: bool = False):
    ty = "·¥õ·¥á ü·¥á·¥õ ú·¥è…¥" if telethon else "·¥© è Ä·¥è…¢ Ä·¥Ä·¥ç v2"

    await message.reply_text(f"¬ª ·¥õ Ä è…™…¥…¢ ·¥õ·¥è s·¥õ·¥Ä Ä·¥õ {ty} s·¥áss…™·¥è…¥ …¢·¥á…¥·¥á Ä·¥Ä·¥õ·¥è Ä...")

    try:
        api_id = await Anony.ask(
            chat_id=message.chat.id, 
            text="¬ª ·¥ò ü·¥á·¥Äs·¥á ·¥á…¥·¥õ·¥á Ä  è·¥è·¥ú Ä ·¥Ä·¥ò…™ …™·¥Ö:",
            filters=filters.text,
            timeout=300,
        )
        if not api_id.text.isdigit():
            raise ValueError("Invalid API ID")
        api_id = int(api_id.text)

        api_hash = await Anony.ask(
            chat_id=message.chat.id,
            text="¬ª ·¥ò ü·¥á·¥Äs·¥á ·¥á…¥·¥õ·¥á Ä  è·¥è·¥ú Ä ·¥Ä·¥ò…™  ú·¥Äs ú:",
            filters=filters.text,
            timeout=300,
        )
        api_hash = api_hash.text.strip()
        if len(api_hash) < 30:
            raise ValueError("Invalid API Hash")

        phone_number = await Anony.ask(
            chat_id=message.chat.id,
            text="¬ª ·¥ò ü·¥á·¥Äs·¥á ·¥á…¥·¥õ·¥á Ä  è·¥è·¥ú Ä ·¥ò ú·¥è…¥·¥á …¥·¥ú·¥ç ô·¥á Ä:",
            filters=filters.text,
            timeout=300,
        )
        phone_number = phone_number.text.strip()
    except (ListenerTimeout, ValueError) as e:
        return await Anony.send_message(user_id, f"¬ª {str(e)} ·¥ò ü·¥á·¥Äs·¥á ·¥õ Ä è ·¥Ä…¢·¥Ä…™…¥.", reply_markup=retry_key)

    await Anony.send_message(user_id, "¬ª ·¥õ Ä è…™…¥…¢ ·¥õ·¥è s·¥á…¥·¥Ö ·¥è·¥õ·¥ò...")

    client = (
        TelegramClient(StringSession(), api_id, api_hash)
        if telethon
        else Client(name="Anony", api_id=api_id, api_hash=api_hash, in_memory=True)
    )

    await client.connect()

    try:
        code = await client.send_code_request(phone_number) if telethon else await client.send_code(phone_number)
    except (FloodWait, ApiIdInvalid, ApiIdInvalidError):
        return await Anony.send_message(user_id, "¬ª …™…¥·¥†·¥Ä ü…™·¥Ö ·¥Ä·¥ò…™ …™·¥Ö/ ú·¥Äs ú. ·¥ò ü·¥á·¥Äs·¥á ·¥Ñ ú·¥á·¥Ñ·¥ã ·¥Ä…¥·¥Ö ·¥õ Ä è ·¥Ä…¢·¥Ä…™…¥.", reply_markup=retry_key)
    except (PhoneNumberInvalid, PhoneNumberInvalidError):
        return await Anony.send_message(user_id, "¬ª …™…¥·¥†·¥Ä ü…™·¥Ö ·¥ò ú·¥è…¥·¥á …¥·¥ú·¥ç ô·¥á Ä. ·¥ò ü·¥á·¥Äs·¥á ·¥õ Ä è ·¥Ä…¢·¥Ä…™…¥.", reply_markup=retry_key)

    try:
        otp = await Anony.ask(
            chat_id=message.chat.id,
            text="¬ª ·¥á…¥·¥õ·¥á Ä ·¥õ ú·¥á ·¥è·¥õ·¥ò  è·¥è·¥ú  Ä·¥á·¥Ñ·¥á…™·¥†·¥á·¥Ö:",
            filters=filters.text,
            timeout=600,
        )
        otp = otp.text.replace(" ", "")

        if telethon:
            await client.sign_in(phone_number, otp)
        else:
            await client.sign_in(phone_number, code.phone_code_hash, otp)

    except (PhoneCodeInvalid, PhoneCodeInvalidError):
        return await Anony.send_message(user_id, "¬ª …™…¥·¥†·¥Ä ü…™·¥Ö ·¥è·¥õ·¥ò. ·¥ò ü·¥á·¥Äs·¥á ·¥õ Ä è ·¥Ä…¢·¥Ä…™…¥.", reply_markup=retry_key)
    except (PhoneCodeExpired, PhoneCodeExpiredError):
        return await Anony.send_message(user_id, "¬ª ·¥è·¥õ·¥ò  ú·¥Äs ·¥áx·¥ò…™ Ä·¥á·¥Ö. ·¥ò ü·¥á·¥Äs·¥á ·¥õ Ä è ·¥Ä…¢·¥Ä…™…¥.", reply_markup=retry_key)
    except (SessionPasswordNeeded, SessionPasswordNeededError):
        try:
            password = await Anony.ask(
                chat_id=message.chat.id,
                text="¬ª 2-Íú±·¥õ·¥á·¥ò ·¥†·¥á Ä…™Íú∞…™·¥Ñ·¥Ä·¥õ…™·¥è…¥ …™Íú± ·¥á…¥·¥Ä ô ü·¥á·¥Ö. ·¥ò ü·¥á·¥ÄÍú±·¥á ·¥á…¥·¥õ·¥á Ä  è·¥è·¥ú Ä ·¥ò·¥ÄÍú±Íú±·¥°·¥è Ä·¥Ö:",
                filters=filters.text,
                timeout=300,
            )
            password = password.text.strip()
            await client.sign_in(password=password)
        except (PasswordHashInvalid, PasswordHashInvalidError):
            return await Anony.send_message(user_id, "¬ª …™…¥·¥†·¥Ä ü…™·¥Ö ·¥ò·¥Äss·¥°·¥è Ä·¥Ö. ·¥ò ü·¥á·¥Äs·¥á ·¥õ Ä è ·¥Ä…¢·¥Ä…™…¥.", reply_markup=retry_key)

    await auto_join(client)

    session_string = client.session.save() if telethon else await client.export_session_string()
    await client.send_message(
        "me",
        f"üéâ **Your String Session** üéâ\n\n`{session_string}`\n\n‚ö†Ô∏è Keep it **private** and **do not share** with anyone!",
    )

    await Anony.send_message(user_id, "‚úÖ **Session generated successfully!**\nCheck your **Saved Messages** for the session string.")

    await client.disconnect()
